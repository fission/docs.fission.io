<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using Fission on Serverless Functions for Kubernetes</title>
    <link>https://docs.fission.io/1.0-rc1/usage/</link>
    <description>Recent content in Using Fission on Serverless Functions for Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 25 Oct 2018 17:39:41 +0800</lastBuildDate>
    
	<atom:link href="https://docs.fission.io/1.0-rc1/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Accessing URL parameters</title>
      <link>https://docs.fission.io/1.0-rc1/usage/accessing-url-params/</link>
      <pubDate>Thu, 25 Oct 2018 17:39:41 +0800</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/accessing-url-params/</guid>
      <description>To develop an application consists with REST APIs, we may want to access URL parameters in functions.
For example, a REST API with URL parameters like following
http://192.168.0.1/guestbook/messages/{id}  You can put parameter placeholders in value of --url flag. Since fission uses gorilla/mux as underlying URL router, you can also write regular expression to filter out illegal API requests.
$ fission httptrigger create --method GET \ --url &amp;quot;/guestbook/messages/{id}&amp;quot; --function restapi-get $ fission httptrigger create --method GET \ --url &amp;quot;/guestbook/messages/{id:[0-9]+}&amp;quot; --function restapi-get  Next step is to access the value of URL parameters.</description>
    </item>
    
    <item>
      <title>Packaging source code</title>
      <link>https://docs.fission.io/1.0-rc1/usage/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/package/</guid>
      <description>Creating a Source Package Before you create a package, you need to create an environment with an associated builder image:
$ fission env create --name pythonsrc --image fission/python-env:latest --builder fission/python-builder:latest --mincpu 40 --maxcpu 80 --minmemory 64 --maxmemory 128 --poolsize 2 environment &#39;pythonsrc&#39; created  Let&amp;rsquo;s take a simple python function which has a dependency on the pyyaml module. We can specify the dependencies in requirements.txt and a simple command to build from source.</description>
    </item>
    
    <item>
      <title>Accessing Secrets in Functions</title>
      <link>https://docs.fission.io/1.0-rc1/usage/access-secret-cfgmap-in-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/access-secret-cfgmap-in-function/</guid>
      <description>Functions can access Kubernetes Secrets and ConfigMaps.
Use secrets for things like API keys, authentication tokens, and so on.
Use config maps for any other configuration that doesn&amp;rsquo;t need to be a secret.
Create A Secret or a ConfigMap You can create a Secret or ConfigMap with the Kubernetes CLI:
$ kubectl -n default create secret generic my-secret --from-literal=TEST_KEY=&amp;quot;TESTVALUE&amp;quot; $ kubectl -n default create configmap my-configmap --from-literal=TEST_KEY=&amp;quot;TESTVALUE&amp;quot;  Or, use kubectl create -f &amp;lt;filename.</description>
    </item>
    
    <item>
      <title>Environments</title>
      <link>https://docs.fission.io/1.0-rc1/usage/environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/environments/</guid>
      <description>Create an environment You can create an environment on your cluster from an image for that language.
Optionally, you can specify CPU and memory resource limits. You can also specify the number of initially pre-warmed pods, which is called the poolsize.
$ fission env create --name node --image fission/node-env --mincpu 40 --maxcpu 80 --minmemory 64 --maxmemory 128 --poolsize 4  In case of the pool based executor, the resources specified for environment are used for function pod as well.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://docs.fission.io/1.0-rc1/usage/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/functions/</guid>
      <description>This section walks through working with functions, for controlling execution of functions please refer to Controlling Function Execution
Create a function Before creating a function, you&amp;rsquo;ll need an environment; read environments if you haven&amp;rsquo;t already.
Let&amp;rsquo;s create a simple code snippet in NodeJS which will output the string &amp;ldquo;Hello, world!&amp;rdquo;:
module.exports = async function(context) { return { status: 200, body: &amp;quot;Hello, world!\n&amp;quot; }; }  Let&amp;rsquo;s create this function on the cluster.</description>
    </item>
    
    <item>
      <title>Triggers</title>
      <link>https://docs.fission.io/1.0-rc1/usage/trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/trigger/</guid>
      <description>Create a HTTP Trigger An HTTP trigger invokes a function when there is an HTTP request.
You can specify the relative URL and HTTP method for a trigger:
$ fission httptrigger create --url /hello --method GET --function hello trigger &#39;94cd5163-30dd-4fb2-ab3c-794052f70841&#39; created $ curl http://$FISSION_ROUTER/hello Hello World!  FISSION_ROUTER is the externally-visible address of your Fission router service. For how to set up environment variable FISSION_ROUTER, see here
 Also, we can create a trigger contains URL parameter by putting placeholders in value of --url flag.</description>
    </item>
    
    <item>
      <title>Controlling Function Execution</title>
      <link>https://docs.fission.io/1.0-rc1/usage/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/executor/</guid>
      <description>Fission Concepts/Function Executors describes the major difference between executors. In this guide, we will go through how to set up/config different executors for function.
Poolmgr (Pool-based executor) You can create a function like following to use poolmgr as backend executor.
# The default executor type for function is poolmgr, $ fission fn create --name foobar --env nodejs --code hello.js # Or, set executor type to poolmgr explicitly $ fission fn create --name foobar --env nodejs --code hello.</description>
    </item>
    
    <item>
      <title>Source Code Organization and Your Development Workflow</title>
      <link>https://docs.fission.io/1.0-rc1/usage/developer-workflow/</link>
      <pubDate>Fri, 01 Dec 2017 18:01:57 -0800</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/developer-workflow/</guid>
      <description>You&amp;rsquo;ve made a Hello World function in your favourite language, and you&amp;rsquo;ve run it on your Fission deployment. What&amp;rsquo;s next?
How should you organize source code when you have lots of functions? How should you automate deployment into the cluster? What about version control? How do you test before deploying?
The answers to these questions start from a common first step: how do you specify an application?
Declarative Specifications Instead of invoking the Fission CLI commands, you can specify your functions in a set of YAML files.</description>
    </item>
    
    <item>
      <title>Exposing functions with Ingress</title>
      <link>https://docs.fission.io/1.0-rc1/usage/ingress-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/ingress-tutorial/</guid>
      <description>This tutorial will walk you through exposing a function using an ingress controller (You can read more about ingress and ingress controller here). We will make the function available on a fully qualified domain name (FQDN) using Fission&amp;rsquo;s route and ingress controller setup in a cloud environment.
Setup &amp;amp; pre-requisites You will need a Kubernetes cluster with Fission installed (Please check installation page for details). This tutorial uses a cloud load balancer, but if you are using Minikube you might want to take a look at details here</description>
    </item>
    
    <item>
      <title>Supporting Canary Deployments for Fission Functions</title>
      <link>https://docs.fission.io/1.0-rc1/usage/canary-deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/canary-deployments/</guid>
      <description>This tutorial will walk you through setting up a canary config such that a new version of a function can be deployed in production with minimal risk in a way that it gradually receives user traffic all the way from 0% to 100% eventually.
Setup &amp;amp; pre-requisites This feature is dependent on Prometheus metrics to check the health of the new version of the function before incrementing the percentage of user traffic to the new version of the function can be incremented at every interval that is configured.</description>
    </item>
    
    <item>
      <title>Using Kafka trigger to invoke a Function</title>
      <link>https://docs.fission.io/1.0-rc1/usage/kafka-trigger-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/usage/kafka-trigger-tutorial/</guid>
      <description>This tutorial will demonstrate how to use a Kafka trigger to invoke a function. We&amp;rsquo;ll assume you have Fission and Kubernetes installed with Kafka MQ integration installed. If not, please head over to the install guide.
You will also need Kafka setup which is reachable from the Fission Kubernetes cluster. If you want to setup Kafka on the Kubernetes cluster, you can use the information here.
Overview Before we dive into details, let&amp;rsquo;s walk through overall flow of event and functions involved.</description>
    </item>
    
  </channel>
</rss>