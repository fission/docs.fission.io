<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fission Concepts on Serverless Functions for Kubernetes</title>
    <link>https://docs.fission.io/1.0-rc1/concepts/</link>
    <description>Recent content in Fission Concepts on Serverless Functions for Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://docs.fission.io/1.0-rc1/concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Concepts</title>
      <link>https://docs.fission.io/1.0-rc1/concepts/basic-concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/concepts/basic-concept/</guid>
      <description>There are three basic concepts/elements of fission:
Function A snippet of code write in specific programming language and will be invoked when requests come to fission router.
Following is a simple nodejs helloworld sample
module.exports = async function(context) { return { status: 200, body: &amp;quot;Hello, world!\n&amp;quot; }; }  Currently, fission support multiple popular language like NodeJs, Go, Python, Java&amp;hellip;etc. For more examples in different languages, please visit fission language examples.</description>
    </item>
    
    <item>
      <title>Function Executors</title>
      <link>https://docs.fission.io/1.0-rc1/concepts/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/1.0-rc1/concepts/executor/</guid>
      <description>When you create a function, you can specify an executor for a function. An executor controls how function pods are created and what capabilities are available for that executor type.
Pool-based executor A pool based executor (Refered to as Poolmgr) creates a pool of generic environment pods as soon as you create an environment. The pool size of initial &amp;ldquo;warm&amp;rdquo; containers can be configured based on user needs. These warm containers contain a small dynamic loader for loading the function.</description>
    </item>
    
  </channel>
</rss>