<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fission on Serverless Functions for Kubernetes</title>
    <link>https://docs.fission.io/0.11.0/</link>
    <description>Recent content in Fission on Serverless Functions for Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 01 Dec 2017 18:01:57 -0800</lastBuildDate>
    
	<atom:link href="https://docs.fission.io/0.11.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Quick Install</title>
      <link>https://docs.fission.io/0.11.0/installation/kubernetessetup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/installation/kubernetessetup/</guid>
      <description>This is a quick guide to help you get started running Kubernetes on your laptop (or on the cloud).
(This isn&amp;rsquo;t meant as a production Kuberenetes guide; it&amp;rsquo;s merely intended to give you something quickly so you can try Fission on it.)
Minikube Minikube is the usual way to run Kubernetes on your laptop:
Install and start Kubernetes on OSX: $ curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl &amp;amp;&amp;amp; chmod +x kubectl &amp;amp;&amp;amp; sudo mv kubectl /usr/local/bin $ curl -Lo minikube https://storage.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>https://docs.fission.io/0.11.0/concepts/basic-concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/concepts/basic-concept/</guid>
      <description>There are three basic concepts/elements of fission:
Function A snippet of code write in specific programming language and will be invoked when requests come to fission router.
Following is a simple nodejs helloworld sample
module.exports = async function(context) { return { status: 200, body: &amp;quot;Hello, world!\n&amp;quot; }; }  Currently, fission support multiple popular language like NodeJs, Go, Python, Java&amp;hellip;etc. For more examples in different languages, please visit fission language examples.</description>
    </item>
    
    <item>
      <title>Fission Function Executors</title>
      <link>https://docs.fission.io/0.11.0/concepts/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/concepts/executor/</guid>
      <description>When you create a function, you can specify an executor for a function. An executor controls how function pods are created and what capabilities are available for that executor type.
Pool-based executor A pool based executor (Refered to as poolmgr) creates a pool of generic environment pods as soon as you create an environment. The pool size of initial &amp;ldquo;warm&amp;rdquo; containers can be configured based on user needs. These warm containers contain a small dynamic loader for loading the function.</description>
    </item>
    
    <item>
      <title>Packaging source code</title>
      <link>https://docs.fission.io/0.11.0/usage/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/package/</guid>
      <description>Creating a Source Package Before you create a package, you need to create an environment with an associated builder image:
$ fission env create --name pythonsrc --image fission/python-env:latest --builder fission/python-builder:latest --mincpu 40 --maxcpu 80 --minmemory 64 --maxmemory 128 --poolsize 2 environment &#39;pythonsrc&#39; created  Let&amp;rsquo;s take a simple python function which has a dependency on the pyyaml module. We can specify the dependencies in requirements.txt and a simple command to build from source.</description>
    </item>
    
    <item>
      <title>Accessing Secrets in Functions</title>
      <link>https://docs.fission.io/0.11.0/usage/access-secret-cfgmap-in-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/access-secret-cfgmap-in-function/</guid>
      <description>Functions can access Kubernetes Secrets and ConfigMaps.
Use secrets for things like API keys, authentication tokens, and so on.
Use config maps for any other configuration that doesn&amp;rsquo;t need to be a secret.
Create A Secret or a ConfigMap You can create a Secret or ConfigMap with the Kubernetes CLI:
$ kubectl -n default create secret generic my-secret --from-literal=TEST_KEY=&amp;quot;TESTVALUE&amp;quot; $ kubectl -n default create configmap my-configmap --from-literal=TEST_KEY=&amp;quot;TESTVALUE&amp;quot;  Or, use kubectl create -f &amp;lt;filename.</description>
    </item>
    
    <item>
      <title>Environments</title>
      <link>https://docs.fission.io/0.11.0/usage/environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/environments/</guid>
      <description>Create an environment You can create an environment on your cluster from an image for that language.
Optionally, you can specify CPU and memory resource limits. You can also specify the number of initially pre-warmed pods, which is called the poolsize.
$ fission env create --name node --image fission/node-env --mincpu 40 --maxcpu 80 --minmemory 64 --maxmemory 128 --poolsize 4  In case of the pool based executor, the resources specified for environment are used for function pod as well.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://docs.fission.io/0.11.0/usage/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/functions/</guid>
      <description>Create a function Before creating a function, you&amp;rsquo;ll need an environment; read environments if you haven&amp;rsquo;t already.
Let&amp;rsquo;s create a simple code snippet in NodeJS which will output the string &amp;ldquo;Hello, world!&amp;rdquo;:
module.exports = async function(context) { return { status: 200, body: &amp;quot;Hello, world!\n&amp;quot; }; }  Let&amp;rsquo;s create this function on the cluster. This only registers the function with Fission, it doesn&amp;rsquo;t run it yet.
$ fission fn create --name hello --code hello.</description>
    </item>
    
    <item>
      <title>Triggers</title>
      <link>https://docs.fission.io/0.11.0/usage/trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/trigger/</guid>
      <description>Create a HTTP Trigger An HTTP trigger invokes a function when there is an HTTP request.
You can specify the relative URL and HTTP method for a trigger:
$ fission httptrigger create --url /hello --method GET --function hello trigger &#39;94cd5163-30dd-4fb2-ab3c-794052f70841&#39; created $ curl http://$FISSION_ROUTER/hello Hello World!  FISSION_ROUTER is the externally-visible address of your Fission router service. For how to set up environment variable FISSION_ROUTER, see here
 If you want to use Kubernetes Ingress for the HTTP Trigger, you can provide the --createingress flag and a hostname.</description>
    </item>
    
    <item>
      <title>Controlling Function Execution</title>
      <link>https://docs.fission.io/0.11.0/usage/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/executor/</guid>
      <description>Autoscaling Let&amp;rsquo;s create a function to demonstrate the autoscaling behaviour in Fission. We create a simple function which outputs &amp;ldquo;Hello World&amp;rdquo; in using NodeJS. We have kept the CPU request and limit purposefully low to simulate the load and also kept the target CPU percent to 50%.
$ fission fn create --name hello --env node --code hello.js --minmemory 64 --maxmemory 128 --minscale 1 --maxscale 6 --executortype newdeploy --targetcpu 50 function &#39;hello&#39; created  Now let&amp;rsquo;s use hey to generate the load with 250 concurrent and a total of 10000 requests:</description>
    </item>
    
    <item>
      <title>Environment Variables</title>
      <link>https://docs.fission.io/0.11.0/installation/env_vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/installation/env_vars/</guid>
      <description>Namespace Set FISSION_NAMESPACE to the namespace where the Fission is installed. You don&amp;rsquo;t have to set this unless there are multiple Fission installations in different namespaces within the same Kubernetes cluster.
$ export FISSION_NAMESPACE &amp;lt;namespace&amp;gt;  Fission Router Address It&amp;rsquo;s convenient to set the FISSION_ROUTER environment variable to the externally-visible address of the Fission router.
Minikube If you&amp;rsquo;re using minikube, use these commands:
$ export FISSION_ROUTER=$(minikube ip):$(kubectl -n fission get svc router -o jsonpath=&#39;{.</description>
    </item>
    
    <item>
      <title>Source Code Organization and Your Development Workflow</title>
      <link>https://docs.fission.io/0.11.0/usage/developer-workflow/</link>
      <pubDate>Fri, 01 Dec 2017 18:01:57 -0800</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/developer-workflow/</guid>
      <description>You&amp;rsquo;ve made a Hello World function in your favourite language, and you&amp;rsquo;ve run it on your Fission deployment. What&amp;rsquo;s next?
How should you organize source code when you have lots of functions? How should you automate deployment into the cluster? What about version control? How do you test before deploying?
The answers to these questions start from a common first step: how do you specify an application?
Declarative Specifications Instead of invoking the Fission CLI commands, you can specify your functions in a set of YAML files.</description>
    </item>
    
    <item>
      <title>Exposing functions with Ingress</title>
      <link>https://docs.fission.io/0.11.0/usage/ingress-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/usage/ingress-tutorial/</guid>
      <description>This tutorial will walk you through exposing a function using an ingress controller (You can read more about ingress and ingress controller here). We will make the function available on a fully qualified domain name (FQDN) using Fission&amp;rsquo;s route and ingress controller setup in a cloud environment.
Setup &amp;amp; pre-requisites You will need a Kubernetes cluster with Fission installed (Please check installation page for details). This tutorial uses a cloud load balancer, but if you are using Minikube you might want to take a look at details here</description>
    </item>
    
    <item>
      <title>Compiling Fission</title>
      <link>https://docs.fission.io/0.11.0/contributing/compiling/</link>
      <pubDate>Thu, 07 Sep 2017 20:10:05 -0700</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/contributing/compiling/</guid>
      <description>You only need to do this if you&amp;rsquo;re making Fission changes; if you&amp;rsquo;re just deploying Fission, use fission.yaml which points to prebuilt images.
 You&amp;rsquo;ll need the go compiler and tools installed, along with the glide dependency management tool. You&amp;rsquo;ll also need docker for building images.
The server side is compiled as one binary (&amp;ldquo;fission-bundle&amp;rdquo;) which contains controller, poolmgr and router; it invokes the right one based on command-line arguments.</description>
    </item>
    
    <item>
      <title>Enabling Istio on Fission</title>
      <link>https://docs.fission.io/0.11.0/tutorial/enabling-istio-on-fission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/tutorial/enabling-istio-on-fission/</guid>
      <description>This is the very first step for fission to integrate with Istio. For those interested in trying to integrate fission with istio, following is the set up tutorial.
Test Environment  Google Kubernetes Engine: 1.9.2-gke.1  Set Up Create Kubernetes v1.9+ cluster Enable both RBAC &amp;amp; initializer features on kubernetes cluster.
$ export ZONE=&amp;lt;zone name&amp;gt; $ gcloud container clusters create istio-demo-1 \ --machine-type=n1-standard-2 \ --num-nodes=1 \ --no-enable-legacy-authorization \ --zone=$ZONE \ --cluster-version=1.</description>
    </item>
    
    <item>
      <title>Building Java Functions</title>
      <link>https://docs.fission.io/0.11.0/tutorial/java-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/tutorial/java-example/</guid>
      <description>With the JVM environment there is now support to use Java functions in Fission. This tutorial explains about the working and some inner details of the way Java functions work in Fission.
To see this Java support in action, we are going to build a simple &amp;ldquo;Hello World&amp;rdquo; function with the JVM environment. This example can also be found in examples directory on GitHub.
JVM Environment The JVM environment in Fission is based on Spring boot and Spring web frameworks.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.fission.io/0.11.0/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fission.io/0.11.0/_header/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>